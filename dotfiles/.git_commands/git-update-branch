#!/usr/bin/env bash
#
# This script simply echos the user input, but illustrates git subcommand best
# practices, including how to parse command line options.
#

# Use git-sh-setup: https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
OPTIONS_STUCKLONG=t
OPTIONS_KEEPDASHDASH=
OPTIONS_SPEC="\
git update-branch [<branch>]

Fetches changes then rebases the upstream branch onto the current branch.
The <branch> can be provided in <remote>/<branch> form. If it's not the
<remote> is implied to be the value from 'git remote show'. If no branch is
given it's implied to be the default branch of the implied remote.
--
<branch>  the branch to rebase from
"

SUBDIRECTORY_OK="yes" . "$(git --exec-path)/git-sh-setup"

while test $# != 0; do
    case "$1" in
    --)
        shift
        break
        ;;
    esac
    shift
done

test $# -gt 2 && die "Too many arguments"

if [[ -n $(git status --porcelain) ]]; then
    die 'Uncommitted changes detected. Commit or stash your changes and try again.'
fi

if [ -z "$1" ]; then
    remote=$(git remote show)
    branch="$remote/$(git remote show $remote | grep 'HEAD branch' | cut -d' ' -f5)"
elif [ "$1" != *"/"* ]; then
    remote=$(git remote show)
    branch="$remote/$1"
else
    remote=$(echo "$1" | cut -d '/' -f 1)
    branch=$(echo "$1" | cut -d '/' -f 2)
fi

git branch -r | grep -qn ${remote}/${branch}$ || die "Branch '$remote/$branch' does not exist"

git fetch $remote
echo "Fetched from '$remote'."

git rebase "$remote/$branch"

if [ -f "$(git rev-parse --git-dir)/REBASE_HEAD" ]; then
    echo "Rebasing from '$remote/$branch' in progress."
else
    echo "Rebased from '$remote/$branch'."
fi
