#!/usr/bin/env bash
#
# This script simply echos the user input, but illustrates git subcommand best
# practices, including how to parse command line options.
#

# Use git-sh-setup: https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
OPTIONS_STUCKLONG=t
OPTIONS_KEEPDASHDASH=
OPTIONS_SPEC="\
git update-branch [<remote>] [<branch>]

Fetches changes then rebases the upstream branch onto the current branch.
--
<remote>  the remote to fetch from
<branch>  the branch to rebase from
"

SUBDIRECTORY_OK="yes" . "$(git --exec-path)/git-sh-setup"

while test $# != 0; do
    case "$1" in
    --)
        shift
        break
        ;;
    esac
    shift
done

. util-parent-branch

test $# -gt 2 && die "Too many arguments"

if [[ -n $(git status --porcelain) ]]; then
    die 'Uncommitted changes detected. Commit or stash your changes and try again.'
fi

if [ -z "$1" ]; then
    parent="$(parent-branch)"
    [ -z "$parent" ] && die "Unable to determine parent branch"
    remote="$(git rev-parse --abbrev-ref --symbolic-full-name "$parent@{u}")"
else
    remote="$1"
fi

if [ $(echo "$remote" | grep '.*/.*') ]; then
    branch=$(echo "$remote" | cut -d '/' -f 2)
    remote=$(echo "$remote" | cut -d '/' -f 1)
fi

branch=${2:-$branch}
if [ -z "$branch" ]; then
    branch=$remote
    remote="$(git rev-parse --abbrev-ref --symbolic-full-name "$parent@{u}")"
    remote=$(echo "$remote" | cut -d '/' -f 1)
fi

git branch -r | grep -qn ${remote}/${branch}$ || die "Branch '$remote/$branch' does not exist"

git fetch $remote
echo "Fetched from '$remote'."

git rebase $remote/$branch

if [ -f "$(git rev-parse --git-dir)/REBASE_HEAD" ]; then
    echo "Rebasing from '$remote/$branch' in progress."
else
    echo "Rebased from '$remote/$branch'."
fi
