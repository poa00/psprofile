#!/usr/bin/env bash
#
# This script creates and updates a .gitignore file.
#

# Use git-sh-setup: https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
OPTIONS_STUCKLONG=t
OPTIONS_KEEPDASHDASH=
OPTIONS_SPEC="\
git ignore [options] <templates-patterns-or-search>...

Creates or updated a .gitignore file.
--
r,replace replace .gitignore file
l,list list available templates
s,search search in available templates
u,update-list update list of templates (automatically done every 3 days)
p,pattern add pattern(s) to .gitignore file
c,current-dir use the current directory .gitignore file (defaults to root file)
"

SUBDIRECTORY_OK="yes" . "$(git --exec-path)/git-sh-setup"

replace=false
list=false
search=false
update=false
pattern=false
ignorefile="$(git rev-parse --show-toplevel)/.gitignore"
while test $# != 0; do
    case "$1" in
    --replace) replace=true ;;
    --list) list=true ;;
    --search) search=true ;;
    --update-list) update=true ;;
    --pattern) pattern=true ;;
    --current-dir) ignorefile="./.gitignore" ;;
    --)
        shift
        break
        ;;
    esac
    shift
done

proxy=$(git config --get gitignore.proxy)
cacert=$(git config --get gitignore.cacert)
certtype=$(git config --get gitignore.cert-type)

args=("-sL")
if [ -n $proxy ]; then
    args+=("--proxy" "$proxy")
fi
if [ -n $cacert ]; then
    args+=("--cacert" "$cacert")
fi
if [ -n $certtype ]; then
    args+=("--cert-type" "$certtype")
fi

ignoreio='https://www.toptal.com/developers/gitignore/api'
gipath="$HOME/.gilist"

file_age() {
    echo $(($(date +%s) - $(date -r $1 +%s)))
}

is_stale() {
    (! [ -f $1 ]) || [ $(file_age $1) -gt 4320 ]
}

join() {
    local oldifs=$IFS
    IFS=$1
    shift
    echo "$*"
    IFS=$oldifs
}

if ($list || $search); then
    if ! $update; then
        if is_stale $gipath; then
            update=true
        fi
    fi

    if $update; then
        curl ${args[@]} "$ignoreio/list" >"$gipath"
    fi

    gilist=$(tr "," "\n" <"$gipath" 2>/dev/null)
    if $list; then
        echo "$gilist" | column
    else
        if [ "$#" -eq 0 ]; then
            die "No search terms provided"
        fi
        found=""
        for type in $gilist; do
            for term in $@; do
                if [[ "$type" == *$term* ]]; then
                    if [ -n $found ]; then
                        found+="\n$type"
                    else
                        found=$type
                    fi
                    break
                fi
            done
        done
        echo -e "$found" | column
    fi
elif $pattern; then
    if [ "$#" -eq 0 ]; then
        die "No patterns provided."
    fi
    first=$replace
    for p in $@; do
        if $first; then
            echo "$p" >"$ignorefile"
        else
            echo "$p" >>"$ignorefile"
        fi
        first=false
    done
else
    if [ "$#" -eq 0 ]; then
        die "No templates provided."
    fi
    template=$(curl ${args[@]} "$ignoreio/$(join ',' $@)")
    if $replace; then
        echo "$template" >"$ignorefile"
    else
        echo "$template" >>"$ignorefile"
    fi
fi
